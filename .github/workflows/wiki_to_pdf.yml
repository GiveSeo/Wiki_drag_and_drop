name: Generate PDF from Wiki

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  repository_dispatch:
    types: [wiki-updated]
  push:
    branches:
      - master

jobs:
  build-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Clone Wiki repository
        run: |
          git clone https://${{ secrets.GH_PAT }}@github.com/GiveSeo/Wiki_drag_and_drop.wiki.git wiki
          cd wiki
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cache LaTeX packages
        uses: actions/cache@v3
        with:
          path: |
            /usr/share/texlive
            /usr/share/texmf
          key: ${{ runner.os }}-texlive-${{ hashFiles('**/*.md') }}
          restore-keys: |
            ${{ runner.os }}-texlive-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            pandoc \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-lang-cjk \
            texlive-latex-extra \
            texlive-lang-chinese \
            lmodern \
            fonts-noto-cjk
          fc-list :lang=ko family | head -5
          echo "✅ Dependencies installed"

      - name: Merge Wiki files and download images
        run: |
          cd wiki
          echo "# Wiki Documentation" > combined.md
          echo "" >> combined.md
          echo "---" >> combined.md
          echo "" >> combined.md
          mkdir -p downloaded_images
          find . -name "*.md" ! -name "combined.md" ! -path "./.git/*" -print0 | sort -z | while IFS= read -r -d '' file; do
            echo "" >> combined.md
            echo "---" >> combined.md
            echo "" >> combined.md
            filename=$(basename "$file" .md)
            echo "# 📄 $filename" >> combined.md
            echo "" >> combined.md
            cat "$file" >> combined.md
          done
          grep -oP '!\[.*?\]\(\K(https?://[^)]+)' combined.md | sort -u | while read -r url; do
            filename=$(echo "$url" | md5sum | cut -d' ' -f1)
            extension="${url##*.}"
            [ ${#extension} -gt 4 ] && extension="jpg"
            curl -L -s --max-time 10 "$url" -o "downloaded_images/${filename}.${extension}" || true
            [ -f "downloaded_images/${filename}.${extension}" ] && sed -i "s|$url|downloaded_images/${filename}.${extension}|g" combined.md
          done

      - name: Generate PDF
        run: |
          cd wiki
          fc-cache -fv
          echo "📝 설치된 Noto 폰트:"
          fc-list | grep -i "noto.*cjk.*kr" | cut -d: -f2 | sort -u
          
          # 매우 강력한 코드 줄바꿈 해결을 위한 LaTeX 헤더 생성
          cat > header.tex << 'EOF'
          % 모든 필요한 패키지 로드
          \usepackage{fvextra}
          \usepackage{listings}
          \usepackage{xcolor}
          \usepackage{seqsplit}
          \usepackage{url}
          
          % 기본 Verbatim 환경 설정 - 매우 적극적인 줄바꿈
          \fvset{
            breaklines=true,
            breakanywhere=true,
            breakautoindent=false,
            breaksymbolleft={},
            breaksymbolright={},
            fontsize=\footnotesize,
            baselinestretch=1
          }
          
          % Highlighting 환경 (코드 구문 강조용) - 더 적극적으로 줄바꿈
          \DefineVerbatimEnvironment{Highlighting}{Verbatim}{
            breaklines=true,
            breakanywhere=true,
            breakautoindent=false,
            breaksymbolleft={},
            breaksymbolright={},
            commandchars=\\\{\},
            fontsize=\footnotesize,
            baselinestretch=1
          }
          
          % verbatim 환경도 동일하게 설정
          \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
            breaklines=true,
            breakanywhere=true,
            breakautoindent=false,
            breaksymbolleft={},
            breaksymbolright={},
            fontsize=\footnotesize,
            baselinestretch=1
          }
          
          % 인라인 코드를 위한 새로운 명령어 정의
          \newcommand{\inlinecode}[1]{%
            \texttt{\seqsplit{#1}}%
          }
          
          % \texttt 재정의 - seqsplit 사용으로 모든 문자에서 줄바꿈 가능
          \let\oldtexttt\texttt
          \renewcommand{\texttt}[1]{%
            \begingroup
            \footnotesize
            \oldtexttt{\seqsplit{#1}}%
            \endgroup
          }
          
          % URL 스타일도 줄바꿈 가능하게
          \def\UrlBreaks{\do\/\do-\do.\do:\do_\do(\do)\do[\do]\do\{\do\}}
          
          % 페이지 레이아웃 최적화
          \usepackage{microtype}
          \usepackage[hang,flushmargin]{footmisc}
          
          % 단락 간격 조정
          \setlength{\parskip}{0.5\baselineskip}
          \setlength{\parindent}{0pt}
          EOF
          
          pandoc combined.md \
            --pdf-engine=xelatex \
            --listings \
            -V 'mainfont:Noto Sans CJK KR' \
            -V 'sansfont:Noto Sans CJK KR' \
            -V 'monofont:Noto Sans Mono CJK KR' \
            -V 'CJKmainfont:Noto Sans CJK KR' \
            -V fontsize=11pt \
            -V geometry:margin=1.2cm \
            -V linestretch=1.2 \
            -V documentclass=article \
            --toc \
            --toc-depth=3 \
            -H header.tex \
            -o combined.pdf

      - name: Commit PDF to repository
        run: |
          mv wiki/combined.pdf Wiki_전체.pdf
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/GiveSeo/Wiki_drag_and_drop.git
          git fetch origin
          git pull origin HEAD --rebase || true
          git add Wiki_전체.pdf
          if ! git diff --staged --quiet; then
            git commit -m "📄 Update Wiki PDF"
            git push origin HEAD
          fi

      - name: Update Home.md with PDF link
        run: |
          cd wiki
          PDF_URL_RAW="https://github.com/GiveSeo/Wiki_drag_and_drop/raw/master/Wiki_전체.pdf"
          PDF_URL_BLOB="https://github.com/GiveSeo/Wiki_drag_and_drop/blob/master/Wiki_전체.pdf"
          HOME_FILE="Home.md"
          
          # 기존 PDF 다운로드 섹션 완전 제거
          if grep -q "## 📘 PDF 다운로드" "$HOME_FILE"; then
            sed -i '/## 📘 PDF 다운로드/,/^$/d' "$HOME_FILE"
          fi
          
          # 파일 끝에 PDF 다운로드 섹션 추가
          echo "" >> "$HOME_FILE"
          echo "---" >> "$HOME_FILE"
          echo "" >> "$HOME_FILE"
          echo "## 📘 PDF 다운로드" >> "$HOME_FILE"
          echo "" >> "$HOME_FILE"
          echo "전체 Wiki를 PDF로 다운로드할 수 있습니다:" >> "$HOME_FILE"
          echo "" >> "$HOME_FILE"
          echo "- [📥 PDF 다운로드 (Raw)]($PDF_URL_RAW)" >> "$HOME_FILE"
          echo "- [👁️ GitHub에서 보기]($PDF_URL_BLOB)" >> "$HOME_FILE"
          echo "" >> "$HOME_FILE"
          
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/GiveSeo/Wiki_drag_and_drop.wiki.git
          git add "$HOME_FILE"
          if ! git diff --staged --quiet; then
            git commit -m "🔗 Update PDF download link"
            git push origin HEAD:master
          fi
